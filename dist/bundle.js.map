{"version":3,"file":"bundle.js","mappings":";;;;;;AAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E","sources":["webpack://Snake/./src/js/script.js"],"sourcesContent":["'use strict'\r\n\r\nconst canvas = document.querySelector(\"#canvas\");\r\nconst ctx = canvas.getContext(\"2d\");\r\n\r\nconst width = canvas.width;\r\nconst height = canvas.height;\r\nconst blockSize = 20;\r\n\r\nconst widthInBlocks = width / blockSize;\r\nconst heightInBlocks = height / blockSize;\r\n\r\nlet score = 0;\r\n\r\nfunction drawBorder() {\r\n    ctx.fillStyle = \"Gray\";\r\n    ctx.fillRect(0, 0, width, blockSize);\r\n    ctx.fillRect(0, height - blockSize, width, blockSize);\r\n    ctx.fillRect(0, 0, blockSize, height);\r\n    ctx.fillRect(width - blockSize, 0, blockSize, height);\r\n};\r\n\r\nfunction drawScore() {\r\n    ctx.font = \"20px Courier\";\r\n    ctx.fillStyle = \"Black\";\r\n    ctx.textAlign = \"left\";\r\n    ctx.textBaseline = \"top\";\r\n    ctx.fillText(\"Score: \" + score, blockSize, blockSize);\r\n};\r\n\r\nfunction gameOver() {\r\n    clearInterval(intervalId);\r\n    ctx.font = \"60px Courier\";\r\n    ctx.fillStyle = \"Black\";\r\n    ctx.textAlign = \"center\";\r\n    ctx.textBaseline = \"middle\";\r\n    ctx.fillText(\"Game Over\", width / 2, height / 2);\r\n};\r\n\r\nfunction circle(x, y, radius, fillCircle) {\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\r\n    if (fillCircle) {\r\n        ctx.fill();\r\n    } else {\r\n        ctx.stroke();\r\n    }\r\n};\r\n\r\nclass Block {\r\n    constructor(col, row) {\r\n        this.col = col;\r\n        this.row = row;\r\n    }\r\n};\r\n\r\nBlock.prototype.drawSquare = function (color) {\r\n    const x = this.col * blockSize;\r\n    const y = this.row * blockSize;\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(x, y, blockSize, blockSize);\r\n};\r\n\r\nBlock.prototype.drawCircle = function (color) {\r\n    const centerX = this.col * blockSize + blockSize / 2;\r\n    const centerY = this.row * blockSize + blockSize / 2;\r\n    ctx.fillStyle = color;\r\n    circle(centerX, centerY, blockSize / 2, true);\r\n};\r\n\r\nBlock.prototype.equal = function (otherBlock) {\r\n    return this.col === otherBlock.col && this.row === otherBlock.row;\r\n};\r\n\r\nclass Snake {\r\n    segments = [\r\n        new Block(7, 5),\r\n        new Block(6, 5),\r\n        new Block(5, 5)\r\n    ];\r\n    direction = \"right\";\r\n    nextDirection = \"right\";\r\n};\r\n\r\nSnake.prototype.draw = function () {\r\n    for (let i = 0; i < this.segments.length; i++) {\r\n        this.segments[i].drawSquare(\"Blue\");\r\n    }\r\n};\r\n\r\nSnake.prototype.move = function () {\r\n    const head = this.segments[0];\r\n    let newHead;\r\n    this.direction = this.nextDirection;\r\n\r\n    switch (this.direction) {\r\n        case \"right\":\r\n            newHead = new Block(head.col + 1, head.row);\r\n            break;\r\n        case \"down\":\r\n            newHead = new Block(head.col, head.row + 1);\r\n            break;\r\n        case \"left\":\r\n            newHead = new Block(head.col - 1, head.row);\r\n            break;\r\n        case \"up\":\r\n            newHead = new Block(head.col, head.row - 1);\r\n            break;\r\n    }\r\n    if (this.checkCollision(newHead)) {\r\n        gameOver();\r\n        return;\r\n    }\r\n\r\n    this.segments.unshift(newHead);\r\n\r\n    if (newHead.equal(apple.position)) {\r\n        score++;\r\n        apple.move();\r\n    } else {\r\n        this.segments.pop();\r\n    }\r\n};\r\n\r\nSnake.prototype.checkCollision = function (head) {\r\n    const leftCollision = (head.col === 0);\r\n    const topCollision = (head.row === 0);\r\n    const rightCollision = (head.col === widthInBlocks - 1);\r\n    const bottomCollision = (head.row === heightInBlocks - 1);\r\n    const wallCollision = leftCollision || topCollision || rightCollision || bottomCollision;\r\n    let selfCollision = false;\r\n    for (let i = 0; i < this.segments.length; i++) {\r\n        if (head.equal(this.segments[i])) {\r\n            selfCollision = true;\r\n        }\r\n    }\r\n    return wallCollision || selfCollision;\r\n};\r\n\r\nSnake.prototype.setDirection = function (newDirection) {\r\n    if (this.direction === \"up\" && newDirection === \"down\") {\r\n        return;\r\n    } else if (this.direction === \"right\" && newDirection === \"left\") {\r\n        return;\r\n    } else if (this.direction === \"down\" && newDirection === \"up\") {\r\n        return;\r\n    } else if (this.direction === \"left\" && newDirection === \"right\") {\r\n        return;\r\n    }\r\n    this.nextDirection = newDirection;\r\n};\r\n\r\nclass Apple {\r\n    position = new Block(10, 10);\r\n};\r\n\r\nApple.prototype.draw = function () {\r\n    this.position.drawCircle(\"LimeGreen\");\r\n};\r\n\r\nApple.prototype.move = function () {\r\n    const randomCol = Math.floor(Math.random() * (widthInBlocks - 2)) + 1;\r\n    const randomRow = Math.floor(Math.random() * (heightInBlocks - 2)) + 1;\r\n    if (this.position !== this.segments) {\r\n        this.position = new Block(randomCol, randomRow);\r\n    }\r\n};\r\n\r\nconst snake = new Snake();\r\nconst apple = new Apple();\r\n\r\nconst intervalId = setInterval(function () {\r\n    ctx.clearRect(0, 0, width, height);\r\n    drawScore();\r\n    snake.move();\r\n    snake.draw();\r\n    apple.draw();\r\n    drawBorder();\r\n}, 100);\r\n\r\nconst directions = {\r\n    37: \"left\",\r\n    38: \"up\",\r\n    39: \"right\",\r\n    40: \"down\"\r\n};\r\n\r\ndocument.body.addEventListener(\"keydown\", (event) => {\r\n    const newDirection = directions[event.keyCode];\r\n    if (newDirection !== undefined) {\r\n        snake.setDirection(newDirection);\r\n    }\r\n});"],"names":[],"sourceRoot":""}